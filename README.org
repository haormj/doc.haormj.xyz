#+TITLE: Personnal Document
#+AUTHOR: Ward Harris
#+EMAIL: haormj@gmail.com
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+OPTIONS: toc:2
#+OPTIONS: num:nil
* Information
| 网站                         | 描述                                         |
|------------------------------+----------------------------------------------|
| http://www.caict.ac.cn/      | 中国信通院,国家高端专业智库 产业创新发展平台 |
| https://csrc.nist.gov/       | 美国国家标准与技术研究院,计算机安全资源中心  |
| http://www.brendangregg.com/ | 系统性能分析                                 |
* Computer
** CPU
中央处理器 （英语：Central Processing Unit，缩写：CPU），是计算机的主要设备之一，功能主要是解释计算机指令以及处理计算机软件中的数据。计算机的可编程性主要是指对中央处理器的编程。
** GPU
图形处理器（英语：graphics processing unit，缩写：GPU），又称显示核心、视觉处理器、显示芯片或绘图芯片，是一种专门在个人计算机、工作站、游戏机和一些移动设备（如平板电脑、智能手机等）上运行绘图运算工作的微处理器。
** CPU/GPU AI
在 AI 中需要处理大量的数据,而根据这些数据的特点,GPU 的速度要远远快于 CPU,从而 GPU 的发展在 AI 的推动下会更快的发展.
** 参考
1. [[https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8][中央处理器]]
2. [[https://zh.wikipedia.org/wiki/%E5%9C%96%E5%BD%A2%E8%99%95%E7%90%86%E5%99%A8][图形处理器]] 
* DNS
** 通配符域名
** 参考 
1. [[https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F][域名系统]]
2. [[https://zh.wikipedia.org/wiki/%E6%A0%B9%E7%B6%B2%E5%9F%9F%E5%90%8D%E7%A8%B1%E4%BC%BA%E6%9C%8D%E5%99%A8][根域名服务器]]
3. [[https://en.wikipedia.org/wiki/Wildcard_DNS_record][Wildcard DNS record]]
4. [[https://en.wikipedia.org/wiki/Domain_Name_System][Domain Name System]]
5. [[https://www.rfc-editor.org/rfc/rfc4592.txt][The Role of Wildcards in the Domain Name System]]

* Docker
** ubuntu 安装

https://docs.docker.com/

https://docs.docker.com/install/linux/docker-ce/ubuntu/

Ubuntu18.04 安装 docker
#+BEGIN_SRC shell
sudo apt-get remove docker docker-engine docker.io
sudo apt-get update
sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
sudo apt-get update
sudo apt-get install docker-ce
#+END_SRC
** centos 安装
https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce
#+BEGIN_SRC shell 
sudo yum install -y yum-utils \
  device-mapper-persistent-data \
  lvm2
sudo yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo
sudo yum install docker-ce
sudo systemctl enable docker
sudo systemctl start docker
#+END_SRC

** 使用    
*** 给运行中容器增加端口映射

http://yaxin-cn.github.io/Docker/expose-port-of-running-docker-container.html

#+BEGIN_SRC shell
iptables -A DOCKER ! -i docker0 -o docker0 -p tcp --dport 27017 -d 172.17.0.2 -j ACCEPT
iptables -t nat -A POSTROUTING -p tcp --dport 27017 -s 172.17.0.2 -d 172.17.0.2 -j MASQUERADE
iptables -t nat -A DOCKER ! -i dokcer0 -p tcp --dport 27017 -j DNAT --to-destination 172.17.0.2:27017
#+END_SRC

docker run --link 说明

https://www.jianshu.com/p/21d66ca6115e
* ETCD 
** 每次访问 etcd 都会重定向到外网
=--advertise-client-urls= 外界访问当前的 url 都是通过这个参数配置的,只有出现在这个参数上的值才会被外界访问,和实际 listen 的不完全对等
** v2.3.4 etcdctl unexpected status code 401
这个可以打开 debug,基本上是没有权限的
** root 用户, root/guest 角色
- root 用户,在启动安全模式的时是必须的创建的,而且会被授予 root 角色
- root 角色有所有权限
- guest 没有提供认证信息的请求有那些权限
** 参考
1. [[https://doczhcn.gitbook.io/etcd/index/index-1/clustering][搭建 etcd 集群]]
2. [[https://coreos.com/etcd/docs/latest/v2/authentication.html][Authentication Guide]]
* Linux
** ab(apache bench)
*** 介绍
 HTTP 服务性能测试工具
** awk
*** 输出满足条件的行
#+begin_src shell
awk '{if ($1 > 10) print $0}' filename
# input
# 1 hello
# 2 world
# 100 who are you
# output
# 100 who are you
#+end_src
*** printf
#+begin_src shell
awk -F , '{printf "|%s|%s|%s|\n", $2,$4,$5}'
#+end_src
** boot
*** 清理 boot 分区
**** ubuntu18.04
#+BEGIN_SRC shell
dpkg --get-selections|grep linux-image
uname -a
sudo apt-get purge  内核名称
# 直接运行以下脚本就可以了
dpkg --get-selections| grep linux-image | grep deinstall | awk '{print $1}' | xargs apt-get purge -y
#+END_SRC
    
** cgroup
*** cpu
#+begin_src 
cgroup.clone_children
cgroup.event_control
cgroup.procs
cpuacct.stat
cpuacct.usage
cpuacct.usage_percpu
# 时间周期长度
cpu.cfs_period_us
# 在当前 cgroup 在设置的周期长度内所能使用的 cpu 时间数
cpu.cfs_quota_us
cpu.rt_period_us
cpu.rt_runtime_us
# cpu 的相对值
cpu.shares
# cpu 统计值
cpu.stat
notify_on_release
tasks
#+end_src
*** memory
#+begin_src
 cgroup.clone_children 
cgroup.event_control
# 进程 id
cgroup.procs
# 线程 id
tasks
# 内存使用量达到上限值的次数
memory.failcnt 
# 触发系统尽可能回收当前 cgroup 可以回收的内存
memory.force_empty
# 限制内存的大小
memory.limit_in_bytes 
# 历史内存最大使用量
memory.max_usage_in_bytes 
memory.move_charge_at_immigrate
memory.numa_stat
memory.oom_control
memory.pressure_level
# 当前限制的内存软额度,当系统内存吃紧时,会回收超过 soft limit 的内存
memory.soft_limit_in_bytes
# 当前内存使用情况
memory.stat 
memory.swappiness
# 当前已使用内存
memory.usage_in_bytes
# 是否将子 cgroup 的使用情况统计到当前 cgroup 中
memory.use_hierarchy
notify_on_release
# memsw
memory.memsw.failcnt 
memory.memsw.limit_in_bytes
memory.memsw.max_usage_in_bytes
memory.memsw.usage_in_bytes
# kmem
memory.kmem.failcnt
memory.kmem.limit_in_bytes
memory.kmem.max_usage_in_bytes 
memory.kmem.slabinfo
memory.kmem.tcp.failcnt
memory.kmem.tcp.limit_in_bytes
memory.kmem.tcp.max_usage_in_bytes
memory.kmem.tcp.usage_in_bytes
memory.kmem.usage_in_bytes
#+end_src
*** 参考
1. [[https://segmentfault.com/a/1190000008125359][Linux Cgroup 系列（04）：限制 cgroup 的内存使用（subsystem 之 memory）]]
2. [[https://segmentfault.com/a/1190000008323952][Linux Cgroup 系列（05）：限制 cgroup 的 CPU 使用（subsystem 之 cpu）]]
** crontab
*** 简介
主要是 linux 用来做定时任务,可以具体的分钟/小时/天/月/周
*** 使用
**** 说明
#+begin_src
usage:	crontab [-u user] file
	crontab [ -u user ] [ -i ] { -e | -l | -r }
		(default operation is replace, per 1003.2)
	-e	(edit user's crontab)
	-l	(list user's crontab)
	-r	(delete user's crontab)
	-i	(prompt before deleting user's crontab)
#+end_src
**** 备份
#+begin_src
crontab -l > crontab.bak
#+end_src
**** 恢复
#+begin_src
crontab filename
#+end_src
**** 删除
#+begin_src
crontab -r
#+end_src
**** 列出
#+begin_src
crontab -l
#+end_src
**** 编辑
#+begin_src
crontab -e
#+end_src
**** 间隔 2 分钟执行一次
#+begin_src
# Edit this file to introduce tasks to be run by cron.
#
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
#
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').#
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
#
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
#
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
#
# For more information see the manual pages of crontab(5) and cron(8)
#
# m h  dom mon dow   command

*/2 * * * * command
#+end_src
**** 间隔 5 小时执行一次
     #+begin_src 
 * */5 * * * command     
     #+end_src
** mtr
#+begin_src  shell
# 分析到达特定主机的网络情况
mtr -r 8.8.8.8
# 测试到主机某个 TCP 监听端口的网络情况
mtr --tcp --port 8888 -r 8.8.8.8
#+end_src
** FQA
*** 进程内存占用分析
*** ubuntu18.04 无法开启 AP 热点
[[http://ubuntuhandbook.org/index.php/2014/09/wifi-hotspot-access-point-not-supported/][文章]]
* Performance 
** cpu
* Physics  
** Stellarium  
[[https://stellarium.org/zh_CN/][Stellarium]] 是一款开源的天象模拟软件。它以 3D 形式展示了极为逼真的星空，就像你在真实世界使用裸眼，双筒望远镜或天文望远镜看到的一样。
* Nginx
** FQA
*** worker_connections are not enough while connecting to upstream   
[[http://nginx.org/en/docs/ngx_core_module.html#worker_connections][官方文档]] 直接调整 worker 的连接数即可,这里的连接数是 nginx 的连接总数
#+begin_src 
events {
    worker_connections  1024;
}
#+end_src
调整为期望大小,不过这个值调整后可能会遇到下面问题
#+begin_src 
events {
    worker_connections  10000;
}
#+end_src
修改完配置文件后
#+begin_src 
# 测试配置文件
nginx -t 
# 重载配置
nginx -s reload
#+end_src
*** 10000 worker_connections exceed open file resource limit: 1024  
[[http://nginx.org/en/docs/ngx_core_module.html#worker_rlimit_nofile][官方文档]] 这个问题主要是因为 nginx 支持的打开文件数量为 1024,但配置的最大连接数为 10000,可以通过在 nginx 中增加以下配置
#+begin_src
worker_rlimit_nofile 10000;
#+end_src
修改完配置文件后
#+begin_src 
# 测试配置文件
nginx -t 
# 重载配置
nginx -s reload
#+end_src
* Redis
** FQA
*** aof 和 rdb 同时开启,redis 重启加载哪个文件?
    #+begin_quote
https://redis.io/topics/persistence#redis-persistence

It is possible to combine both AOF and RDB in the same instance. Notice that, in this case, when Redis restarts the AOF file will be used to reconstruct the original dataset since it is guaranteed to be the most complete.    
    #+end_quote
aof 文件
* Cryptography  
** FQA
*** PCKS#5 和 PCKS#7 的区别
根据[[https://en.wikipedia.org/wiki/Padding_%28cryptography%29#PKCS#5_and_PKCS#7][Padding]]描述,PCKS#5 和 PCKS#7 原理相同,只是 PCKS#5 当时定义的块大小为 64 比特 
* Proxy
** redsocks
*** profile
[[https://github.com/semigodking/redsocks][code]]
*** usage 
[[https://hub.docker.com/r/haormj/redsocks][docker]]
** kcptun
*** profile
[[https://github.com/xtaci/kcptun][code]]
*** server
    #+begin_src 
[Unit]
Description=Kcptun Server Service
After=storage.service
After=network.target

[Service]
LimitNOFILE=65536
LimitNPROC=65536
Type=simple
WorkingDirectory=/opt/kcptun 
ExecStart=/opt/kcptun/server_linux_amd64 \
  -t "127.0.0.1:15789" \
  -l ":28796" \
  --key "it's a secrect" \
  -mode fast3 \
  -nocomp \
  -sockbuf 16777217 \
  -dscp 46 
MemoryLimit=2G

Restart=on-failure
RestartSec=2s

[Install]
WantedBy=multi-user.target 
    #+end_src
*** client
    #+begin_src
[Unit]
Description=Kcptun Client Service
After=storage.service
After=network.target

[Service]
LimitNOFILE=65536
LimitNPROC=65536
Type=simple
WorkingDirectory=/opt/kcptun 
ExecStart=/opt/kcptun/client_linux_amd64 \
  -r "x.x.x.x:28796" \
  -l ":15789" \
  --key "it's a secrect" \
  -mode fast3 \
  -nocomp \
  -autoexpire 900 \
  -sockbuf 16777217 \
  -dscp 46
 
MemoryLimit=2G

Restart=on-failure
RestartSec=2s

[Install]
WantedBy=multi-user.target 
    #+end_src
** shadowsocks
*** profile
[[https://github.com/shadowsocks/shadowsocks-go][code]]
*** server 
    #+begin_src 
[Unit]
Description=Shadowsocks
After=storage.service
After=network.target

[Service]
LimitNOFILE=65536
LimitNPROC=65536
Type=simple
WorkingDirectory=/opt/shadowsocks
ExecStart=/opt/shadowsocks/shadowsocks-server -u

Restart=on-failure
RestartSec=2s

[Install]
WantedBy=multi-user.target    
    #+end_src
*** client
    #+begin_src 
[Unit]
Description=Shadowsocks
After=storage.service
After=network.target

[Service]
LimitNOFILE=65536
LimitNPROC=65536
Type=simple
WorkingDirectory=/opt/shadowsocks
ExecStart=/opt/shadowsocks/shadowsocks-local

Restart=on-failure
RestartSec=2s

[Install]
WantedBy=multi-user.target    
    #+end_src
** shadowsocks2
*** profile
[[https://github.com/shadowsocks/go-shadowsocks2][code]] 
*** server
    #+begin_src 
[Unit]
Description=Shadowsocks2
After=storage.service
After=network.target

[Service]
LimitNOFILE=65536
LimitNPROC=65536
Type=simple
WorkingDirectory=/opt/shadowsocks2
ExecStart=/opt/shadowsocks2/shadowsocks2 \
  -s 'ss://AEAD_CHACHA20_POLY1305:your-password@:23586' \
  -verbose

Restart=on-failure
RestartSec=2s

[Install]
WantedBy=multi-user.target      
    #+end_src
*** client
    #+begin_src 
[Unit]
Description=Shadowsocks2
After=storage.service
After=network.target

[Service]
LimitNOFILE=65536
LimitNPROC=65536
Type=simple
WorkingDirectory=/opt/shadowsocks2
ExecStart=/opt/shadowsocks2/shadowsocks2 \
 -c 'ss://AEAD_CHACHA20_POLY1305:your-password@[server_address]:23586' \
 -verbose \
 -socks :1080 \
 -redir :12345 \
 -u \
 -udptun :8053=8.8.8.8:53,:8054=8.8.4.4:53 \
 -tcptun :8053=8.8.8.8:53,:8054=8.8.4.4:53

Restart=on-failure
RestartSec=2s

[Install]
WantedBy=multi-user.target     
    #+end_src
* FQA
** 正向代理和反向代理?
- 正向代理: 客户端通过代理访问服务器, 由客户端发起
- 反向代理: 服务器配置代理,让客户端通过代理访问,由服务器发起
举例: 房客/中介/房东
- 正向代理: 房客->中介->房东,房客主动找中介
- 反向代理: 房客->中介<-房东,房东主动找中介
主要是主体不同,不要太过于纠结,名字而已,都称为代理也行!
* Idea
1. 盲目创新的背后是无知
